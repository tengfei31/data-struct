<?php
declare(strict_types = 1);

namespace App\Command;

use App\Util\AliyunLive;
use App\Util\BinaryTree\Element;
use App\Util\BinaryTree\NoRecursionPrintTree;
use App\Util\BinaryTree\Tree;
use App\Util\BinaryTree\RecursionPrintTree;
use App\Util\BinaryTree\PrintTree;
use Hyperf\Command\Command as HyperfCommand;
use Symfony\Component\Console\Input\InputArgument;
use Hyperf\Command\Annotation\Command;

/**
 * 测试二叉树
 * Class TestBinaryTree
 * @package App\Command
 * @Command
 */
class TestBinaryTree extends HyperfCommand
{
    public function __construct()
    {
        parent::__construct("test:binary-tree");
    }

    public function configure()
    {
        parent::configure(); // TODO: Change the autogenerated stub
        $this->setHelp("测试二叉树");
        $this->setDescription("测试二叉树");
        //$this->addUsage("[--loop=1|2|3] 遍历二叉树，先中后序");
        //$this->addUsage("打印二叉树");
    }

    protected function getArguments()
    {
        return [
            ["dump", InputArgument::OPTIONAL, "[--dump=0|1]打印整个二叉树"],
            ["loop", InputArgument::OPTIONAL, "[--loop=1|2|3]先中后序遍历二叉树"],
        ];
    }

    public function handle()
    {
        $dump = $this->input->getArgument("dump");

        $binaryTree = $this->TestBinaryTree();
        if ($dump == 1) {
            var_dump($binaryTree);
            echo json_encode($binaryTree, JSON_UNESCAPED_UNICODE | JSON_UNESCAPED_SLASHES) . PHP_EOL;
        } else {
            $this->PrintTree($binaryTree);
        }
        //$loop = $this->input->getArgument("loop");
    }

    /**
     * 打印二叉树
     * @param Tree $tree
     */
    public function PrintTree(Tree $tree)
    {
        $this->info("递归遍历:");
        $this->recursionPrintTree($tree);

        $this->info("非递归遍历:");
        $this->noRecursionPrintTree($tree);
    }

    /**
     * 递归遍历
     * @param Tree $tree
     */
    public function recursionPrintTree(Tree $tree) :void
    {
        $treeObj = new RecursionPrintTree($tree);
        printf("前序遍历:%s\n", implode(" ", $treeObj->PreOrder()));
        printf("中序遍历:%s\n", implode(" ", $treeObj->InOrder()));
        printf("后序遍历:%s\n", implode(" ", $treeObj->PostOrder()));

        printf("后序遍历计算节点数:%d\n", $treeObj->SizeBT());
        printf("后序遍历计算高度:%d\n", $treeObj->DepthBT());

        $newTree = $treeObj->CopyBT();
        $newTree->root->element->SetValue("z");
        $newTreeObj = new RecursionPrintTree($newTree);
        printf("复制树前序遍历:%s\n", implode(" ", $newTreeObj->PreOrder()));
    }

    /**
     * 非递归遍历
     * @param Tree $tree
     */
    public function noRecursionPrintTree(Tree $tree) :void
    {
        $treeObj = new NoRecursionPrintTree($tree);
        printf("前序遍历:%s\n", implode(" ", $treeObj->IPreOrder()));
        printf("中序遍历:%s\n", implode(" ", $treeObj->IInOrder()));
        printf("后序遍历:%s\n", implode(" ", $treeObj->IPostOrder()));
    }

    /**
     * 生成二叉树
     * @return Tree
     */
    public function TestBinaryTree() :Tree
    {
        $bt = Tree::CreateTree();
        $lt = Tree::CreateTree();
        $rt = Tree::CreateTree();
        $dNode = Tree::CreateTree();
        Tree::MakeBinaryTree($dNode, Element::getInstance("d"), Tree::CreateTree(), Tree::CreateTree());
        $eNode = Tree::CreateTree();
        Tree::MakeBinaryTree($eNode, Element::getInstance("e"), Tree::CreateTree(), Tree::CreateTree());
        $elementB = Element::getInstance("b");
        Tree::MakeBinaryTree($lt, $elementB, $dNode, $eNode);
        $fNode = Tree::CreateTree();
        Tree::MakeBinaryTree($fNode, Element::getInstance("f"), Tree::CreateTree(), Tree::CreateTree());
        $gNode = Tree::CreateTree();
        Tree::MakeBinaryTree($gNode, Element::getInstance("g"), Tree::CreateTree(), Tree::CreateTree());
        $elementC = Element::getInstance("c");
        Tree::MakeBinaryTree($rt, $elementC, $fNode, $gNode);
        $elementA = Element::getInstance("a");
        Tree::MakeBinaryTree($bt, $elementA, $lt, $rt);
        return $bt;
    }

    /**
     * 生成阿里云的直播推流、播流地址
     */
    public function makeLiveUrl()
    {
        $liveConfig = [
            //推流域名
            "push_domain" => "live-push.jht-jewelry.cn",
            //推流域名配置的鉴权Key
            "push_key" => "FFe36UfEhN",
            //配置过期时间为2小时
            "expire_time" => 60 * 60 * 2,
            //播放域名
            "play_domain" => "live-play.jht-jewelry.cn",
            //播放域名配置的鉴权Key
            "play_key" => "7xoSC6OVey",
        ];
        //生成随机的AppName
        $appName = "rn";
        //生成随机的StreamName
        $streamName = "rn";
        $aliyunLive = AliyunLive::getInstance();
        $pushUrl = $aliyunLive->pushUrl($liveConfig["push_domain"], $liveConfig["push_key"], $liveConfig["expire_time"], $appName, $streamName);
        $pushHead = substr($pushUrl, 0, strrpos($pushUrl, "/"));
        $pushTail = substr($pushUrl, strrpos($pushUrl, "/"));
        var_dump($pushHead, substr($pushTail, 1));
        echo "推流地址：" . $pushUrl;
        echo PHP_EOL;

        try {
            echo "m3u8播流地址：" . $aliyunLive->playUrl($liveConfig["play_domain"], $liveConfig["play_key"], $liveConfig["expire_time"], $appName, $streamName);
            echo PHP_EOL;
        } catch (\Exception $e) {
            echo "错误信息：" . $e->getMessage();
            echo PHP_EOL;
        }
    }
}